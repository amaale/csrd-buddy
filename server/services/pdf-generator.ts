import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { type Report, type Transaction } from '@shared/schema';

export interface ReportData {
  report: Report;
  transactions: Transaction[];
  companyName: string;
  userEmail: string;
}

export async function generatePDFReport(
  reportData: ReportData,
  outputPath: string
): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const stream = fs.createWriteStream(outputPath);
      doc.pipe(stream);

      // Add report content
      addReportHeader(doc, reportData);
      addExecutiveSummary(doc, reportData);
      addEmissionsBreakdown(doc, reportData);
      addMethodologySection(doc);
      addTransactionDetails(doc, reportData);
      addFooter(doc, reportData);

      doc.end();

      stream.on('finish', () => {
        resolve(outputPath);
      });

      stream.on('error', (error) => {
        reject(error);
      });
    } catch (error) {
      reject(error);
    }
  });
}

function addReportHeader(doc: PDFKit.PDFDocument, data: ReportData): void {
  // Add CSRD Buddy logo/header
  doc.fontSize(24)
     .fillColor('#1976D2')
     .text('CSRD Buddy', 50, 50);

  doc.fontSize(12)
     .fillColor('#666666')
     .text('ESG Reporting Platform', 50, 80);

  // Add title
  doc.fontSize(20)
     .fillColor('#000000')
     .text('Corporate Sustainability Report', 50, 120);

  doc.fontSize(16)
     .fillColor('#333333')
     .text(data.report.title, 50, 150);

  // Add company info
  doc.fontSize(12)
     .text(`Company: ${data.companyName}`, 50, 180)
     .text(`Period: ${data.report.period}`, 50, 195)
     .text(`Report Date: ${new Date(data.report.createdAt).toLocaleDateString()}`, 50, 210)
     .text(`Generated by: ${data.userEmail}`, 50, 225);

  // Add line separator
  doc.moveTo(50, 250)
     .lineTo(550, 250)
     .strokeColor('#E0E0E0')
     .stroke();
}

function addExecutiveSummary(doc: PDFKit.PDFDocument, data: ReportData): void {
  let yPosition = 270;

  doc.fontSize(16)
     .fillColor('#000000')
     .text('Executive Summary', 50, yPosition);

  yPosition += 30;

  const totalEmissions = parseFloat(data.report.totalEmissions);
  const scope1 = parseFloat(data.report.scope1Emissions);
  const scope2 = parseFloat(data.report.scope2Emissions);
  const scope3 = parseFloat(data.report.scope3Emissions);

  doc.fontSize(12)
     .fillColor('#333333')
     .text(`This report presents the greenhouse gas (GHG) emissions inventory for ${data.companyName} `, 50, yPosition)
     .text(`for the period ${data.report.period}, prepared in accordance with the GHG Protocol `, 50, yPosition + 15)
     .text(`Corporate Accounting and Reporting Standard and CSRD requirements.`, 50, yPosition + 30);

  yPosition += 60;

  doc.fontSize(14)
     .fillColor('#1976D2')
     .text('Key Findings:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .fillColor('#333333')
     .text(`• Total GHG Emissions: ${totalEmissions.toFixed(1)} tonnes CO₂e`, 70, yPosition)
     .text(`• Scope 1 (Direct): ${scope1.toFixed(1)} tonnes CO₂e (${((scope1/totalEmissions)*100).toFixed(1)}%)`, 70, yPosition + 15)
     .text(`• Scope 2 (Energy Indirect): ${scope2.toFixed(1)} tonnes CO₂e (${((scope2/totalEmissions)*100).toFixed(1)}%)`, 70, yPosition + 30)
     .text(`• Scope 3 (Other Indirect): ${scope3.toFixed(1)} tonnes CO₂e (${((scope3/totalEmissions)*100).toFixed(1)}%)`, 70, yPosition + 45);
}

function addEmissionsBreakdown(doc: PDFKit.PDFDocument, data: ReportData): void {
  doc.addPage();
  
  let yPosition = 50;

  doc.fontSize(16)
     .fillColor('#000000')
     .text('Emissions Breakdown by Scope', 50, yPosition);

  yPosition += 40;

  // Scope 1 section
  doc.fontSize(14)
     .fillColor('#F44336')
     .text('Scope 1: Direct Emissions', 50, yPosition);

  yPosition += 20;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('Direct emissions from owned or controlled sources including:', 50, yPosition)
     .text('• Company vehicles and fleet operations', 70, yPosition + 15)
     .text('• Fuel combustion in stationary sources', 70, yPosition + 30)
     .text('• Fugitive emissions from refrigerants', 70, yPosition + 45);

  doc.fontSize(12)
     .fillColor('#F44336')
     .text(`Total Scope 1: ${parseFloat(data.report.scope1Emissions).toFixed(1)} tonnes CO₂e`, 50, yPosition + 70);

  yPosition += 100;

  // Scope 2 section
  doc.fontSize(14)
     .fillColor('#FF9800')
     .text('Scope 2: Energy Indirect Emissions', 50, yPosition);

  yPosition += 20;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('Indirect emissions from purchased energy including:', 50, yPosition)
     .text('• Purchased electricity consumption', 70, yPosition + 15)
     .text('• Purchased heating and cooling', 70, yPosition + 30)
     .text('• Purchased steam', 70, yPosition + 45);

  doc.fontSize(12)
     .fillColor('#FF9800')
     .text(`Total Scope 2: ${parseFloat(data.report.scope2Emissions).toFixed(1)} tonnes CO₂e`, 50, yPosition + 70);

  yPosition += 100;

  // Scope 3 section
  doc.fontSize(14)
     .fillColor('#1976D2')
     .text('Scope 3: Other Indirect Emissions', 50, yPosition);

  yPosition += 20;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('Other indirect emissions in the value chain including:', 50, yPosition)
     .text('• Business travel and accommodation', 70, yPosition + 15)
     .text('• Employee commuting', 70, yPosition + 30)
     .text('• Purchased goods and services', 70, yPosition + 45)
     .text('• Waste disposal', 70, yPosition + 60);

  doc.fontSize(12)
     .fillColor('#1976D2')
     .text(`Total Scope 3: ${parseFloat(data.report.scope3Emissions).toFixed(1)} tonnes CO₂e`, 50, yPosition + 85);
}

function addMethodologySection(doc: PDFKit.PDFDocument): void {
  doc.addPage();
  
  let yPosition = 50;

  doc.fontSize(16)
     .fillColor('#000000')
     .text('Methodology', 50, yPosition);

  yPosition += 30;

  doc.fontSize(12)
     .fillColor('#333333')
     .text('This GHG inventory has been prepared using the following methodology:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .text('• Organizational Boundary: Operational control approach', 70, yPosition)
     .text('• Operational Boundary: All material emission sources identified', 70, yPosition + 15)
     .text('• Base Year: Current reporting period', 70, yPosition + 30)
     .text('• GHG Protocol: Corporate Accounting and Reporting Standard', 70, yPosition + 45)
     .text('• Emission Factors: DEFRA 2024 conversion factors', 70, yPosition + 60)
     .text('• Data Quality: AI-powered transaction classification with manual review', 70, yPosition + 75);

  yPosition += 110;

  doc.fontSize(14)
     .fillColor('#1976D2')
     .text('Data Sources:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('• Financial transaction records (expense reports, invoices)', 70, yPosition)
     .text('• Energy bills and utility statements', 70, yPosition + 15)
     .text('• Travel booking systems and receipts', 70, yPosition + 30)
     .text('• Fuel purchase records', 70, yPosition + 45);

  yPosition += 80;

  doc.fontSize(14)
     .fillColor('#1976D2')
     .text('Limitations and Assumptions:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('• Some Scope 3 emissions may not be captured due to data limitations', 70, yPosition)
     .text('• Emission factors are based on UK national averages', 70, yPosition + 15)
     .text('• AI classification accuracy estimated at 95%', 70, yPosition + 30);
}

function addTransactionDetails(doc: PDFKit.PDFDocument, data: ReportData): void {
  doc.addPage();
  
  let yPosition = 50;

  doc.fontSize(16)
     .fillColor('#000000')
     .text('Transaction Summary', 50, yPosition);

  yPosition += 30;

  // Group transactions by scope
  const scope1Transactions = data.transactions.filter(t => t.scope === 1);
  const scope2Transactions = data.transactions.filter(t => t.scope === 2);
  const scope3Transactions = data.transactions.filter(t => t.scope === 3);

  const addTransactionGroup = (transactions: Transaction[], scopeName: string, color: string) => {
    if (transactions.length === 0) return;

    doc.fontSize(14)
       .fillColor(color)
       .text(scopeName, 50, yPosition);

    yPosition += 25;

    doc.fontSize(10)
       .fillColor('#333333')
       .text('Description', 50, yPosition)
       .text('Amount (€)', 300, yPosition)
       .text('CO₂e (kg)', 400, yPosition)
       .text('Date', 480, yPosition);

    yPosition += 15;

    // Add line
    doc.moveTo(50, yPosition)
       .lineTo(550, yPosition)
       .strokeColor('#E0E0E0')
       .stroke();

    yPosition += 10;

    // Show top 10 transactions for this scope
    const topTransactions = transactions
      .sort((a, b) => parseFloat(b.co2Emissions || '0') - parseFloat(a.co2Emissions || '0'))
      .slice(0, 10);

    topTransactions.forEach(transaction => {
      if (yPosition > 750) {
        doc.addPage();
        yPosition = 50;
      }

      const description = transaction.description.length > 30 
        ? transaction.description.substring(0, 30) + '...'
        : transaction.description;

      doc.fontSize(9)
         .fillColor('#333333')
         .text(description, 50, yPosition)
         .text(parseFloat(transaction.amount).toFixed(2), 300, yPosition)
         .text(parseFloat(transaction.co2Emissions || '0').toFixed(1), 400, yPosition)
         .text(new Date(transaction.date).toLocaleDateString(), 480, yPosition);

      yPosition += 12;
    });

    yPosition += 20;
  };

  addTransactionGroup(scope1Transactions, 'Scope 1 Transactions', '#F44336');
  addTransactionGroup(scope2Transactions, 'Scope 2 Transactions', '#FF9800');
  addTransactionGroup(scope3Transactions, 'Scope 3 Transactions', '#1976D2');
}

function addFooter(doc: PDFKit.PDFDocument, data: ReportData): void {
  doc.addPage();
  
  let yPosition = 50;

  doc.fontSize(16)
     .fillColor('#000000')
     .text('Verification and Compliance', 50, yPosition);

  yPosition += 30;

  doc.fontSize(12)
     .fillColor('#333333')
     .text('This report has been prepared in accordance with:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .text('• The GHG Protocol Corporate Accounting and Reporting Standard', 70, yPosition)
     .text('• Corporate Sustainability Reporting Directive (CSRD)', 70, yPosition + 15)
     .text('• European Sustainability Reporting Standards (ESRS)', 70, yPosition + 30);

  yPosition += 60;

  doc.fontSize(14)
     .fillColor('#1976D2')
     .text('Data Accuracy Statement:', 50, yPosition);

  yPosition += 25;

  doc.fontSize(11)
     .fillColor('#333333')
     .text('The data in this report has been processed using AI-powered classification ', 50, yPosition)
     .text('with an estimated accuracy rate of 95%. All calculations use official ', 50, yPosition + 15)
     .text('emission factors from DEFRA and other recognized sources.', 50, yPosition + 30);

  yPosition += 60;

  doc.fontSize(10)
     .fillColor('#666666')
     .text(`Report generated by CSRD Buddy on ${new Date().toLocaleDateString()}`, 50, yPosition)
     .text(`Report ID: ${data.report.id}`, 50, yPosition + 15)
     .text(`For questions about this report, contact: ${data.userEmail}`, 50, yPosition + 30);

  // Add page numbers
  const pageCount = doc.bufferedPageRange().count;
  for (let i = 0; i < pageCount; i++) {
    doc.switchToPage(i);
    doc.fontSize(10)
       .fillColor('#666666')
       .text(`Page ${i + 1} of ${pageCount}`, 500, 780);
  }
}

export async function ensureReportsDirectory(): Promise<string> {
  const reportsDir = path.join(process.cwd(), 'reports');
  
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  return reportsDir;
}
